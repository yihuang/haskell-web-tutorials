0a1
> {-# LANGUAGE DeriveGeneric #-}
4a6
> import GHC.Generics
5a8,10
> import Data.Aeson
> import Data.Aeson.Types (typeMismatch)
> import qualified Data.Vector as V
7d11
< import qualified Data.ByteString.Lazy as L
20c24,30
< type SimpleState = L.ByteString
---
> newtype SimpleState = SimpleState Int
>     deriving (Generic)
> 
> instance ToJSON SimpleState
> instance FromJSON SimpleState where
>     parseJSON (Array vec) = return $ SimpleState $ V.length vec
>     parseJSON o = typeMismatch "SimpleState" o
27c37
<         return $ response d
---
>         return $ response (encode d)
40,43c50,53
<             Right rsp -> do
<                 atomically $ forcePutTMVar state rsp
<                 threadDelay interval
<                 loop
---
>             Right rsp ->
>                 maybe (putStrLn "decode json failed." >> loop)
>                       ((>>next) . atomically . forcePutTMVar state)
>                       (decode rsp)
44a55,56
> 
>     next = threadDelay interval >> loop
